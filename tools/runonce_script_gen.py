#!/usr/bin/env python3
import sys
from collections import defaultdict
from pathlib import Path

# XXX: does not work for klee

MAGMA = Path(__file__).resolve().parent.parent


def main() -> int:
    fuzzers_path = MAGMA / "fuzzers"
    groups: dict[str, list[Path]] = defaultdict(list)
    for fuzzer_path in fuzzers_path.iterdir():
        if fuzzer_path.name == "klee":
            continue

        runonce_sh_path = fuzzer_path / "runonce.sh"
        if not runonce_sh_path.is_file():
            continue

        for line in reversed(runonce_sh_path.read_text().splitlines()):
            line = line.strip()
            if len(line) > 0:
                break
        else:
            continue

        groups[line].append(fuzzer_path)

    output = f"""\
#!/bin/bash
# AUTO-GENERATED BY {sys.argv[0]}

if [ $# -lt 2 ]; then
    echo >&2 "usage: $0 <fuzzer> <testcase>"
    exit 1
fi

ARG=$1
shift
case $ARG in
"""

    for cmd, paths in groups.items():
        output += "|".join(p.stem for p in paths) + ")\n"
        output += "    CMD=" + cmd + "\n    ;;\n"

    output += """\
*)
    echo >&2 "fuzzer $ARG is not recognized"
    exit 1
    ;;
esac

export TIMELIMIT=1s
export MEMLIMIT_MB=200

run_limited()
{
    set -e
    ulimit -Sv $[MEMLIMIT_MB << 10];
    ${@:1}
}
export -f run_limited

args="${ARGS/@@/"'$1'"}"
if [ -z "$args" ]; then
    args="'$1'"
fi

timeout --kill-after 3s --preserve-status $TIMELIMIT bash -c "$CMD"\
"""

    print(output)
    return 0


if __name__ == "__main__":
    exit(main())
