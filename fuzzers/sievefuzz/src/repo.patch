diff --git a/patches/afl/afl-fuzz.c b/patches/afl/afl-fuzz.c
index fc18643..0e943de 100644
--- a/patches/afl/afl-fuzz.c
+++ b/patches/afl/afl-fuzz.c
@@ -245,6 +245,7 @@ int comm_server(int mode) {
     struct addrinfo hints, *servinfo, *p;
     int rv;
     char s[INET6_ADDRSTRLEN];
+    int connection_trials = 0;
 
     memset(&hints, 0, sizeof hints);
     hints.ai_family = AF_UNSPEC;
@@ -254,6 +255,7 @@ int comm_server(int mode) {
         fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
         return 1;
     }
+try_again:
     for (p = servinfo; p != NULL; p = p->ai_next) {
         if ((sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
             perror("client:socket");
@@ -270,7 +272,12 @@ int comm_server(int mode) {
     }
 
     if (p == NULL) {
-        fprintf(stderr, "client: failed to connect\n");
+        fprintf(stderr, "client: failed to connect (trial %d)\n", connection_trials+1);
+        if (connection_trials < 120) {
+            connection_trials++;
+            sleep(1);
+            goto try_again;
+        }
         return 2;
     }
 
diff --git a/patches/afl/afl-llvm-pass.so.cc b/patches/afl/afl-llvm-pass.so.cc
index a928476..54056a1 100644
--- a/patches/afl/afl-llvm-pass.so.cc
+++ b/patches/afl/afl-llvm-pass.so.cc
@@ -157,7 +157,15 @@ class AFLCoverage : public ModulePass {
         "getSBoxValue",
         "BlockCopy",
         "xtime",
-        "cgc_xor"
+        "cgc_xor",
+        "OPENSSL_cpuid_setup",
+        "resolve_addslashes",
+        "resolve_base64_decode",
+        "resolve_base64_encode",
+        "resolve_crc32_x86_simd_update",
+        "resolve_stripslashes",
+        "zend_cpu_supports_",
+        "_GLOBAL__sub_I_",
 	    // These functions form a part of the libcgc and as such does not make sense to instrument these
         // "_pcre_find_bracket",
         // "_pcre_is_newline",
diff --git a/patches/svf/fence.cpp b/patches/svf/fence.cpp
index 6f7c5e8..52601dd 100644
--- a/patches/svf/fence.cpp
+++ b/patches/svf/fence.cpp
@@ -43,7 +43,7 @@ void traverseBackwardsFlowSensitive(
                         const SVFFunction* prevFun = libNode->getFun();
                         const Function* candidate = prevFun->getLLVMFun();
                         spdlog::debug("Lib detected:{}", candidate->getName().str());
-                        allowlist.insert(candidate->getName().str());
+                        allowlist.insert(demangleString(candidate->getName().str().c_str()));
                     }
                 }
             }
@@ -80,12 +80,12 @@ void traverseBackwardsFlowSensitive(
                     if (isReachable(prevFun, targetFun, callgraph, allowed_indirect, inlined_funcs)) {
                         spdlog::debug("  {} can be reached by {}", targetFun->getLLVMFun()->getName().str(), candidate->getName().str());
                         worklist.push(prevNode);
-                        allowlist.insert(candidate->getName().str());
+                        allowlist.insert(demangleString(candidate->getName().str().c_str()));
                     }
                 }
                 else {
                     spdlog::debug("  Adding non-call edge");
-                    allowlist.insert(candidate->getName().str());
+                    allowlist.insert(demangleString(candidate->getName().str().c_str()));
                     worklist.push(prevNode);
                 }
                 visited.insert(edge);
diff --git a/patches/svf/svf-af.h b/patches/svf/svf-af.h
index 562f4e8..8fe3952 100644
--- a/patches/svf/svf-af.h
+++ b/patches/svf/svf-af.h
@@ -23,6 +23,7 @@
 // #define PORT "3490"
 #define BACKLOG 10
 #define MAXDATASIZE 5 
+#define INDIRECT_FILE_SEP '@'
 
 using namespace llvm;
 using namespace std;
diff --git a/patches/svf/svf-ex.cpp b/patches/svf/svf-ex.cpp
index 167f5d4..3213326 100644
--- a/patches/svf/svf-ex.cpp
+++ b/patches/svf/svf-ex.cpp
@@ -68,6 +68,8 @@ static llvm::cl::opt<bool> GetIndirect("get-indirect", llvm::cl::init(false), ll
 // Switch to enable the static analysis to be run in client-server mode with the fuzzer as the client 
 static llvm::cl::opt<bool> RunServer("run-server", llvm::cl::init(false), llvm::cl::desc("run static analysis server for interfacing with fuzzer")); 
 
+static llvm::cl::opt<std::string> PreprocessingDoneFile("preprocessing-done", llvm::cl::desc("Specify file to be used for checking if preprocessing is done"), llvm::cl::value_desc("File to be used for checking if preprocessing is done"));
+
 int main(int argc, char ** argv) {
 
     int arg_num = 0;
@@ -114,6 +116,14 @@ int main(int argc, char ** argv) {
     auto end = chrono::steady_clock::now(); 
     spdlog::info("Time taken to build structures:{}", chrono::duration_cast<chrono::milliseconds>(end - start).count());
 
+    // Write time taken to PreprocessingDoneFile
+    if (!PreprocessingDoneFile.empty()) {
+        std::ofstream outfile;
+        outfile.open(PreprocessingDoneFile);
+        outfile << chrono::duration_cast<chrono::milliseconds>(end - start).count();
+        outfile.close();
+    }
+
     // Get the port to run the static analysis server on
     std::string port = Port;
 
@@ -247,9 +257,10 @@ int main(int argc, char ** argv) {
         // Create a list of inlined functions by iterating through the functions of statically analyzed binary
         for (SVFModule::llvm_const_iterator I = svfModule->llvmFunBegin(), E =
                     svfModule->llvmFunEnd(); I != E; ++I) {
-	    if (uninlined_funcs.find((*I)->getName().str()) == uninlined_funcs.end()) {
-               spdlog::info("Inlined:{}", (*I)->getName().str());
-	       inlined_funcs.insert((*I)->getName().str());
+            std::string demangled_name = demangleString((*I)->getName().str().c_str());
+            if (uninlined_funcs.find(demangled_name) == uninlined_funcs.end()) {
+                spdlog::info("Inlined:{}", demangled_name);
+                inlined_funcs.insert(demangled_name);
             }
         }
 
@@ -641,7 +652,9 @@ int main(int argc, char ** argv) {
                                      // caller_str, callee_str - endpoint function names which are used to identify which functions to 
                                      // add as part of the descendants of the indirect calls
                                      allowed_indirect.insert(calledge->edgeFlag);
-                                     indirect_file << calledge->edgeFlag << " " << caller_str << " " << callee_str << "\n";
+                                     indirect_file << calledge->edgeFlag
+                                        << INDIRECT_FILE_SEP << caller_str
+                                        << INDIRECT_FILE_SEP << callee_str << "\n";
                                      indirect_file.close();
                                  }
 
@@ -794,7 +807,9 @@ int main(int argc, char ** argv) {
                                      // caller_str, callee_str - endpoint function names which are used to identify which functions to 
                                      // add as part of the descendants of the indirect calls
                                      allowed_indirect.insert(calledge->edgeFlag);
-                                     indirect_file << calledge->edgeFlag << " " << caller_str << " " << callee_str << "\n";
+                                     indirect_file << calledge->edgeFlag
+                                        << INDIRECT_FILE_SEP << caller_str
+                                        << INDIRECT_FILE_SEP << callee_str << "\n";
                                      indirect_file.close();
                                  }
 
diff --git a/patches/svf/svf.patch b/patches/svf/svf.patch
new file mode 100644
index 0000000..7a85cb9
--- /dev/null
+++ b/patches/svf/svf.patch
@@ -0,0 +1,114 @@
+diff --git a/include/SVF-FE/CPPUtil.h b/include/SVF-FE/CPPUtil.h
+index a1f20e08..4eda7332 100644
+--- a/include/SVF-FE/CPPUtil.h
++++ b/include/SVF-FE/CPPUtil.h
+@@ -51,6 +51,29 @@ struct DemangledName
+ 
+ struct DemangledName demangle(const std::string name);
+ 
++/*
++ * Get the vtable struct of a class.
++ *
++ * Given the class:
++ *
++ *   class A {
++ *     virtual ~A();
++ *   };
++ *   A::~A() = default;
++ *
++ *  The corresponding vtable @_ZTV1A is of type:
++ *
++ *    { [4 x i8*] }
++ *
++ *  If the program has been compiled with AddressSanitizer,
++ *  the vtable will have redzones and appear as:
++ *
++ *    { { [4 x i8*] }, [32 x i8] }
++ *
++ *  See https://github.com/SVF-tools/SVF/issues/1114 for more.
++ */
++const ConstantStruct *getVtblStruct(const GlobalValue *vtbl);
++
+ std::string getBeforeBrackets(const std::string name);
+ bool isValVtbl(const Value *val);
+ bool isLoadVtblInst(const LoadInst *loadInst);
+diff --git a/lib/Graphs/ICFG.cpp b/lib/Graphs/ICFG.cpp
+index 2f800b01..a30af381 100644
+--- a/lib/Graphs/ICFG.cpp
++++ b/lib/Graphs/ICFG.cpp
+@@ -386,6 +386,11 @@ void ICFG::updateCallGraph(PTACallGraph* callgraph)
+             const SVFFunction*  callee = *func_iter;
+             CallBlockNode* CallBlockNode = getCallBlockNode(cs);
+             FunEntryBlockNode* calleeEntryNode = getFunEntryICFGNode(callee);
++            if (!calleeEntryNode)
++            {
++                SVFUtil::errs() << __func__ << ": cannot find entry node for function: " << callee->getName() << "\n";
++                continue;
++            }
+             addCallEdge(CallBlockNode, calleeEntryNode, cs);
+ 
+             if (!isExtCall(callee))
+diff --git a/lib/SVF-FE/CHG.cpp b/lib/SVF-FE/CHG.cpp
+index 764b840c..e63acd1c 100644
+--- a/lib/SVF-FE/CHG.cpp
++++ b/lib/SVF-FE/CHG.cpp
+@@ -120,8 +120,7 @@ void CHGraph::buildCHGNodes(const GlobalValue *globalvalue)
+ {
+     if (isValVtbl(globalvalue) && globalvalue->getNumOperands() > 0)
+     {
+-        const ConstantStruct *vtblStruct = SVFUtil::dyn_cast<ConstantStruct>(globalvalue->getOperand(0));
+-        assert(vtblStruct && "Initializer of a vtable not a struct?");
++        const ConstantStruct *vtblStruct = cppUtil::getVtblStruct(globalvalue);
+         string className = getClassNameFromVtblObj(globalvalue);
+         if (!getNode(className))
+             createNode(className);
+@@ -422,10 +421,7 @@ void CHGraph::analyzeVTables(const Module &M)
+         const GlobalValue *globalvalue = SVFUtil::dyn_cast<const GlobalValue>(&(*I));
+         if (isValVtbl(globalvalue) && globalvalue->getNumOperands() > 0)
+         {
+-            const ConstantStruct *vtblStruct =
+-                SVFUtil::dyn_cast<ConstantStruct>(globalvalue->getOperand(0));
+-            assert(vtblStruct && "Initializer of a vtable not a struct?");
+-
++            const ConstantStruct *vtblStruct = cppUtil::getVtblStruct(globalvalue);
+             string vtblClassName = getClassNameFromVtblObj(globalvalue);
+             CHNode *node = getNode(vtblClassName);
+             assert(node && "node not found?");
+diff --git a/lib/SVF-FE/CPPUtil.cpp b/lib/SVF-FE/CPPUtil.cpp
+index d8c9c960..ed8e15f8 100644
+--- a/lib/SVF-FE/CPPUtil.cpp
++++ b/lib/SVF-FE/CPPUtil.cpp
+@@ -100,6 +100,19 @@ static string getBeforeParenthesis(const string name)
+     return name.substr(0, pos);
+ }
+ 
++const ConstantStruct *cppUtil::getVtblStruct(const GlobalValue *vtbl)
++{
++    const ConstantStruct *vtblStruct = SVFUtil::dyn_cast<ConstantStruct>(vtbl->getOperand(0));
++    assert(vtblStruct && "Initializer of a vtable not a struct?");
++
++    if (vtblStruct->getNumOperands() == 2 &&
++        SVFUtil::isa<ConstantStruct>(vtblStruct->getOperand(0)) &&
++        vtblStruct->getOperand(1)->getType()->isArrayTy())
++        return SVFUtil::cast<ConstantStruct>(vtblStruct->getOperand(0));
++
++    return vtblStruct;
++}
++
+ string cppUtil::getBeforeBrackets(const string name)
+ {
+     if (name[name.size() - 1] != '>')
+diff --git a/lib/SVF-FE/DCHG.cpp b/lib/SVF-FE/DCHG.cpp
+index 139f9ff5..46286488 100644
+--- a/lib/SVF-FE/DCHG.cpp
++++ b/lib/SVF-FE/DCHG.cpp
+@@ -178,8 +178,7 @@ void DCHGraph::buildVTables(const Module &module)
+             node->setVTable(gv);
+             vtblToTypeMap[gv] = getCanonicalType(type);
+ 
+-            const ConstantStruct *vtbls = SVFUtil::dyn_cast<ConstantStruct>(gv->getOperand(0));
+-            assert(vtbls && "unexpected vtable type");
++            const ConstantStruct *vtbls = cppUtil::getVtblStruct(gv);
+             for (unsigned nthVtbl = 0; nthVtbl < vtbls->getNumOperands(); ++nthVtbl)
+             {
+                 const ConstantArray *vtbl = SVFUtil::dyn_cast<ConstantArray>(vtbls->getOperand(nthVtbl));
diff --git a/patches/svf/util.cpp b/patches/svf/util.cpp
index bf87cd6..43573d5 100644
--- a/patches/svf/util.cpp
+++ b/patches/svf/util.cpp
@@ -78,11 +78,16 @@ PTACallGraphNode* get_callgraph_node(
     const Function *target_function = NULL;
     for (SVFModule::llvm_const_iterator I = svfModule->llvmFunBegin(), E =
                 svfModule->llvmFunEnd(); I != E; ++I) {
-        if ((target.compare((*I)->getName().str())) == 0) { 
+        std::string demangled_fn = demangleString((*I)->getName().str().c_str());
+        if ((target.compare(demangled_fn)) == 0) { 
 	        target_function = *I;
             break;
         }
     }
+    if (target_function == NULL) {
+        spdlog::critical("{}: could not find function: {}", __func__, target);
+        abort();
+    }
     const SVFFunction* target_svf = svfModule->getSVFFunction(target_function);
     PTACallGraphNode* target_node = callgraph->getCallGraphNode(target_svf);
     return target_node;
@@ -116,7 +121,7 @@ bool isReachable(
             PTACallGraphEdge* edge = *it;
             // Check if there is at least one indirect edge between two functions and that the function has not been inlined
             // if ((edge->isIndirectCallEdge()) || (!(edge->isIndirectCallEdge()) && !(edge->isDirectCallEdge()))) {
-            if (edge->isIndirectCallEdge() && (inlined_funcs.find((edge->getSrcNode()->getFunction()->getLLVMFun()->getName().str())) == inlined_funcs.end())) {
+            if (edge->isIndirectCallEdge() && (inlined_funcs.find(demangleString(edge->getSrcNode()->getFunction()->getLLVMFun()->getName().str().c_str())) == inlined_funcs.end())) {
                 // If there is an indirect edge, and its not been observed before, ignore this
                 if (allowed_indirect.find(edge->edgeFlag) == allowed_indirect.end()) { 
                     continue ;
@@ -132,11 +137,12 @@ bool isReachable(
 
 // Get SVF function corresponding to function name 
 const Function* get_function(std::string functionName, SVFModule* svfModule) {
+    std::string demangled_fn = demangleString(functionName.c_str());
     const Function *function = NULL;
     for (SVFModule::llvm_const_iterator I = svfModule->llvmFunBegin(), E =
                 svfModule->llvmFunEnd(); I != E; ++I) {
         // std::cout << target_function->getName().str() << " ";
-        if ((functionName.compare((*I)->getName().str())) == 0) { 
+        if (demangled_fn.compare(demangleString((*I)->getName().str().c_str())) == 0) { 
 	        function = *I;
             break;
         }
@@ -161,7 +167,7 @@ const Instruction* get_inst(std::string functionName, SVFModule* svfModule) {
 void process_indirect_edgeids(std::string& metadata, std::set<uint64_t>& allowed_indirect) {
     std::stringstream ss(metadata);
     std::string token;
-    char delim = ' ';
+    char delim = INDIRECT_FILE_SEP;
     // The first token corresponds to the indirect call edge
     // Add it to the list of allowed indirect call edges
     while (std::getline(ss, token, delim)) {
@@ -175,12 +181,12 @@ void process_indirect_callees(std::string& metadata, std::set<uint64_t>& allowed
     std::stringstream ss(metadata);
     std::string token, callee_str;
     int count = 0;
-    char delim = ' ';
+    char delim = INDIRECT_FILE_SEP;
     while (std::getline(ss, token, delim)) {
         // The first token corresponds to the indirect call edge
         // Add it to the list of allowed indirect call edges
         if (count == 0) {
-	    allowed_indirect.insert(std::stol(token));
+            allowed_indirect.insert(std::stol(token));
             count += 1;
         }
         // The second token corresponds to the caller string. We don't do anything with it as of now
@@ -198,7 +204,7 @@ void process_indirect_callees(std::string& metadata, std::set<uint64_t>& allowed
     PTACallGraphNode* callee_node = get_callgraph_node(svfModule, callgraph, callee_str);
 
     // Insert the callee of the indirect call into the allowlist 
-    allowlist.insert(callee_node->getFunction()->getLLVMFun()->getName().str());
+    allowlist.insert(demangleString(callee_node->getFunction()->getLLVMFun()->getName().str().c_str()));
 
     // Insert all the descendants of the callee into the allowlist
     // getForwardDescendants(callee_node, target_svf, allowed_indirect, allowlist, callgraph); 
diff --git a/third_party/install_svf.sh b/third_party/install_svf.sh
index 8cec1c7..9826395 100755
--- a/third_party/install_svf.sh
+++ b/third_party/install_svf.sh
@@ -7,32 +7,41 @@ function addToPATH {
   esac
 }
 
+set -xe
+
 # Get SVF
 if [ ! -d SVF ]; then
-	git clone https://github.com/SVF-tools/SVF
-	cd SVF && git reset --hard a99ee34 && cd -
-	cp `pwd`/../patches/svf/setup.sh ./SVF/setup.sh
-	cp `pwd`/../patches/svf/build.sh ./SVF/build.sh
-
-	# Link SVF-specific files
-	rm ./SVF/tools/Example/svf-ex.cpp
-	ln -s `pwd`/../patches/svf/svf-ex.cpp SVF/tools/Example/svf-ex.cpp
-
-	rm ./SVF/include/Graphs/GenericGraph.h
-	ln -s `pwd`/../patches/svf/GenericGraph.h SVF/include/Graphs/GenericGraph.h
-
-	rm ./SVF/tools/Example/CMakeLists.txt
-	cp `pwd`/../patches/svf/CMakeLists.txt SVF/tools/Example/CMakeLists.txt
-
-	ln -s `pwd`/../patches/svf/fence.cpp SVF/tools/Example/fence.cpp
-	ln -s `pwd`/../patches/svf/util.cpp SVF/tools/Example/util.cpp
-	ln -s `pwd`/../patches/svf/svf-af.h SVF/include/svf-af.h
-
-	if [ ! -d spdlog ]; then
-		git clone https://github.com/gabime/spdlog 
-	fi
-	cp -r spdlog/include/spdlog/ ./SVF/include
-	cd SVF && source ./build.sh && cd -
+    git clone https://github.com/SVF-tools/SVF
+    cd SVF
+    git reset --hard a99ee34
+    git apply ../../patches/svf/svf.patch
+    cd -
+    cp `pwd`/../patches/svf/setup.sh ./SVF/setup.sh
+    cp `pwd`/../patches/svf/build.sh ./SVF/build.sh
+
+    # Link SVF-specific files
+    rm ./SVF/tools/Example/svf-ex.cpp
+    ln -s `pwd`/../patches/svf/svf-ex.cpp SVF/tools/Example/svf-ex.cpp
+
+    rm ./SVF/include/Graphs/GenericGraph.h
+    ln -s `pwd`/../patches/svf/GenericGraph.h SVF/include/Graphs/GenericGraph.h
+
+    rm ./SVF/tools/Example/CMakeLists.txt
+    cp `pwd`/../patches/svf/CMakeLists.txt SVF/tools/Example/CMakeLists.txt
+
+    ln -s `pwd`/../patches/svf/fence.cpp SVF/tools/Example/fence.cpp
+    ln -s `pwd`/../patches/svf/util.cpp SVF/tools/Example/util.cpp
+    ln -s `pwd`/../patches/svf/svf-af.h SVF/include/svf-af.h
+
+    if [ ! -d spdlog ]; then
+        git clone https://github.com/gabime/spdlog
+        cd spdlog && git reset --hard 2312489bdc304886b4a2eebc8f7f8dc0c4de688f && cd -
+    fi
+    cp -r spdlog/include/spdlog/ ./SVF/include
+
+    set +xe
+    cd SVF && source ./build.sh && cd -
 else
-	cd SVF && source ./setup.sh && cd -
+    set +xe
+    cd SVF && source ./setup.sh && cd -
 fi
